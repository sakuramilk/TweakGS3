/*
 * Copyright (C) 2011-2012 sakuramilk <c.sakuramilk@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.sakuramilk.TweakGS3.Common;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public abstract class PropertyManager {

    protected File mFile;

    protected PropertyManager(String filePath) {
        mFile = new File(filePath);
    }

    private String[] readText() {
        if (!mFile.exists()) {
            return null;
        }
        if (!mFile.canRead()) {
            RootProcess process = new RootProcess();
            process.init();
            process.write("chmod 666 " + mFile.getPath() + "\n");
            process.term();
        }
        try {
            BufferedReader br;
            br = new BufferedReader(new FileReader(mFile));
            ArrayList<String> ret = new ArrayList<String>();
            String line;
            while ((line = br.readLine()) != null) {
                ret.add(line);
            }
            br.close();
            return ret.toArray(new String[0]);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void writeText(String text) {
        if (!mFile.canWrite()) {
            RootProcess process = new RootProcess();
            process.init();
            process.write("chmod 666 " + mFile.getPath() + "\n");
            process.term();
        }
        try {
            PrintWriter pw;
            pw = new PrintWriter(new BufferedWriter(new FileWriter(mFile)));
            pw.write(text);
            pw.flush();
            pw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public boolean exists() {
        return mFile.exists();
    }

    public void delete() {
        if (exists()) {
            mFile.delete();
        }
    }

    public String getValue(String key) {
        return getValue(key, null);
    }

    public String getValue(String key, String defaultValue) {
        if (!mFile.exists()) return defaultValue;
        if (mFile.length() == 0) return defaultValue;

        String propString[] = readText();
        if (propString != null) {
            for (String prop : propString) {
                String keyValue[] = prop.split("=");
                if (key.equals(keyValue[0])) {
                    if (keyValue.length > 1) {
                        return keyValue[1];
                    } else {
                        return defaultValue;
                    }
                }
            }
        }
        return defaultValue;
    }

    public void setValue(String key, String value) {
        StringBuilder sb = new StringBuilder();
        if (!mFile.exists() || mFile.length() == 0) {
            sb.append("##### AUTO GENERATED BY TweakGS3 #####\n");
            sb.append(key + "=" + value + "\n");
            writeText(sb.toString());
            return;
        }

        String propStringArray[] = readText();
        HashMap<String, String> keyValuePair = new HashMap<String, String>();

        boolean isFindKey = false;
        for (String propString : propStringArray) {
            String prop = propString.trim();
            int pos = prop.indexOf('=');
            if (pos != -1 && prop.indexOf('#') != 0) {
                String pairOfkey = prop.substring(0, pos);
                String pairOfValue = prop.substring(pos + 1);
                if (key.equals(pairOfkey)) {
                    isFindKey = true;
                    keyValuePair.put(pairOfkey, value);
                } else {
                    keyValuePair.put(pairOfkey, pairOfValue);
                }
            }
        }
        if (!isFindKey) {
            keyValuePair.put(key, value);
        }

        sb.append("##### AUTO GENERATED BY TweakGS3 #####\n");
        Set<Entry<String, String>> entrySet = keyValuePair.entrySet(); 
        Iterator<Entry<String, String>> entryIte = entrySet.iterator();  
        while(entryIte.hasNext()) {
                Entry<String, String> obj = entryIte.next();
                sb.append(obj.getKey() + "="  + obj.getValue() + "\n");              
        }
        writeText(sb.toString());
    }
}
